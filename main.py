import telebot
import speech_recognition as sr
import os
import numpy as np
import subprocess
import time
import logging
from tqdm import tqdm
from datetime import datetime
from telebot.handler_backends import State
from requests.exceptions import ReadTimeout, ConnectionError
from config import *
from metrics import MetricsCollector, measure_time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(module)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(
            PATHS['logs'], f'bot_{datetime.now().strftime("%Y%m%d")}.log')),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –º–µ—Ç—Ä–∏–∫
metrics_collector = MetricsCollector(PATHS['metrics'])


def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    bot = telebot.TeleBot(token=TOKEN)

    @measure_time(metrics_collector, 'audio_splitting')
    def split_audio_file(input_file, chunk_duration=AUDIO_SETTINGS['chunk_duration']):
        """
        –†–∞–∑–±–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.

        Args:
            input_file (str): –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            chunk_duration (int): –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –∫—É—Å–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            list: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –∞—É–¥–∏–æ-—á–∞–Ω–∫–∞–º
        """
        logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {input_file}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
        audio_duration = float(subprocess.check_output([
            'ffprobe',
            '-v', 'error',
            '-show_entries', 'format=duration',
            '-of', 'default=noprint_wrappers=1:nokey=1',
            input_file
        ]).decode().strip())

        chunk_paths = []
        chunks = np.arange(0, audio_duration, chunk_duration)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        with tqdm(total=len(chunks), desc="–†–∞–∑–±–∏–µ–Ω–∏–µ –∞—É–¥–∏–æ", unit="chunk") as pbar:
            for start in chunks:
                end = min(start + chunk_duration, audio_duration)
                chunk_filename = os.path.join(
                    PATHS['temp_audio'],
                    f'audio_chunk_{int(start)}.wav'
                )

                subprocess.run([
                    'ffmpeg',
                    '-i', input_file,
                    '-ss', str(start),
                    '-to', str(end),
                    '-acodec', AUDIO_SETTINGS['audio_codec'],
                    '-ar', str(AUDIO_SETTINGS['sample_rate']),
                    chunk_filename
                ], check=True, capture_output=True)

                chunk_paths.append(chunk_filename)
                pbar.update(1)
                logger.debug(f"–°–æ–∑–¥–∞–Ω —á–∞–Ω–∫: {chunk_filename}")

        logger.info(f"–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∏—Ç –Ω–∞ {len(chunk_paths)} —á–∞—Å—Ç–µ–π")
        return chunk_paths

    @bot.message_handler()
    def text_processing(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

        Args:
            message (telebot.types.Message): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if message.from_user.id != ALLOWED_USER_ID:
            logger.warning(
                f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            bot.reply_to(message, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò–∑–≤–∏–Ω–∏—Ç–µ.')
            return

        logger.info(
            f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        bot.reply_to(
            message, 'üó£Ô∏è –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ –º–Ω–µ.')

    @bot.message_handler(content_types=['voice'])
    @measure_time(metrics_collector, 'voice_processing')
    def voice_processing(message):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.

        Args:
            message (telebot.types.Message): –í—Ö–æ–¥—è—â–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if message.from_user.id != ALLOWED_USER_ID:
            logger.warning(
                f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            bot.reply_to(message, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò–∑–≤–∏–Ω–∏—Ç–µ.')
            return

        if message:
            logger.info(
                f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            bot.reply_to(
                message, '‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')

            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            with tqdm(total=3, desc="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—É–¥–∏–æ", unit="step") as pbar:
                try:
                    # –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    file_id = message.voice.file_id
                    file = bot.get_file(file_id)
                    file_path = file.file_path
                    downloaded_file = bot.download_file(file_path)
                    pbar.update(1)
                    logger.debug("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω")

                    # –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OGG
                    ogg_filepath = os.path.join(
                        PATHS['temp_audio'], 'audio.ogg')
                    wav_filepath = os.path.join(
                        PATHS['temp_audio'], 'audio.wav')
                    with open(ogg_filepath, 'wb') as new_file:
                        new_file.write(downloaded_file)
                    pbar.update(1)
                    logger.debug("OGG —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

                    # –®–∞–≥ 3: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV
                    subprocess.run([
                        'ffmpeg',
                        '-i', ogg_filepath,
                        '-acodec', AUDIO_SETTINGS['audio_codec'],
                        '-ar', str(AUDIO_SETTINGS['sample_rate']),
                        wav_filepath
                    ], check=True, capture_output=True)
                    pbar.update(1)
                    logger.debug("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

                    # –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                    chunk_paths = split_audio_file(wav_filepath)
                    process_recognition(message, chunk_paths)

                except Exception as e:
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                    bot.reply_to(
                        message, f'‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ: {str(e)}')
                finally:
                    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    for filepath in [ogg_filepath, wav_filepath]:
                        try:
                            if os.path.exists(filepath):
                                os.remove(filepath)
                                logger.debug(
                                    f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {filepath}")
                        except Exception as e:
                            logger.warning(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {filepath}: {str(e)}")

        else:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            bot.reply_to(
                message, 'ü§î –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')

    @measure_time(metrics_collector, 'speech_recognition')
    def process_recognition(message, chunk_paths):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.

        Args:
            message (telebot.types.Message): –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            chunk_paths (list): –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∞—É–¥–∏–æ-—á–∞–Ω–∫–∞–º
        """
        recognizer = sr.Recognizer()
        logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è {len(chunk_paths)} —á–∞—Å—Ç–µ–π –∞—É–¥–∏–æ")

        try:
            bot.send_message(message.chat.id, 'üìù')

            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            with tqdm(total=len(chunk_paths), desc="–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏", unit="chunk") as pbar:
                for i, chunk_path in enumerate(chunk_paths, 1):
                    try:
                        with sr.AudioFile(chunk_path) as source:
                            audio_data = recognizer.record(source)
                            chunk_text = recognizer.recognize_google(
                                audio_data, language=BOT_SETTINGS['language'])
                            bot.send_message(message.chat.id, chunk_text)
                            logger.debug(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —á–∞—Å—Ç—å {i}")
                    except sr.UnknownValueError:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∞—Å—Ç—å {i}")
                        bot.send_message(
                            message.chat.id, f'‚ö†Ô∏è –ß–∞—Å—Ç—å {i}: –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.')
                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —á–∞—Å—Ç–∏ {i}: {str(e)}")
                        bot.send_message(
                            message.chat.id, f'‚ö†Ô∏è –ß–∞—Å—Ç—å {i}: –æ—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.')
                    finally:
                        try:
                            if os.path.exists(chunk_path):
                                os.remove(chunk_path)
                                logger.debug(
                                    f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–∞–Ω–∫–∞: {chunk_path}")
                        except Exception as e:
                            logger.warning(
                                f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞–Ω–∫ {chunk_path}: {str(e)}")
                        pbar.update(1)

            bot.send_message(message.chat.id, 'üîö')
            logger.info("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

        except Exception as e:
            logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {str(e)}")
            bot.send_message(
                message.chat.id,
                f'‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {str(e)}'
            )

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    while True:
        try:
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            bot.polling(
                none_stop=True,
                timeout=BOT_SETTINGS['timeout'],
                long_polling_timeout=BOT_SETTINGS['long_polling_timeout']
            )
        except ReadTimeout as e:
            logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {str(e)}")
            time.sleep(BOT_SETTINGS['reconnect_delay'])
        except ConnectionError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            time.sleep(BOT_SETTINGS['reconnect_delay'] * 2)
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            time.sleep(BOT_SETTINGS['reconnect_delay'])
        finally:
            try:
                bot.stop_polling()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling: {str(e)}")

            # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            metrics_summary = metrics_collector.get_metrics_summary()
            logger.info("–¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            for operation, stats in metrics_summary.items():
                logger.info(f"{operation}: —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è - {stats['average_time']}—Å, "
                            f"–≤—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π - {stats['total_operations']}")

            logger.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)


if __name__ == '__main__':
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    run_bot()
