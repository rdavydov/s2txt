import telebot
import speech_recognition as sr
import os
import numpy as np
import subprocess
import time
import logging
import threading
from telebot.handler_backends import State
from requests.exceptions import ReadTimeout, ConnectionError, HTTPError
from telebot import apihelper
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()          # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')
ALLOWED_USER_ID = int(os.getenv('ALLOWED_USER_ID')) if os.getenv('ALLOWED_USER_ID') else None

# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
if not TOKEN or not ALLOWED_USER_ID:
    try:
        from config import TOKEN, ALLOWED_USER_ID
        ALLOWED_USER_ID = int(ALLOWED_USER_ID)
    except ImportError:
        logger.error("–¢–æ–∫–µ–Ω –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        sys.exit(1)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
TEMP_AUDIO_DIR = 'temp_audio'
os.makedirs(TEMP_AUDIO_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
bot_running = True

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global bot_running
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    bot_running = False

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def safe_bot_operation(bot, operation, *args, **kwargs):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–æ—Ç–æ–º —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    """
    max_retries = 3
    for attempt in range(max_retries):
        try:
            return operation(*args, **kwargs)
        except (ReadTimeout, ConnectionError, HTTPError) as e:
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                logger.warning(f"–û—à–∏–±–∫–∞ {type(e).__name__} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}. –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ {wait_time}—Å...")
                time.sleep(wait_time)
            else:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                raise
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
            raise

def cleanup_temp_files():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        for filename in os.listdir(TEMP_AUDIO_DIR):
            filepath = os.path.join(TEMP_AUDIO_DIR, filename)
            if os.path.isfile(filepath):
                os.remove(filepath)
        logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

def run_bot():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    –í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –º–µ—Ö–∞–Ω–∏–∑–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.
    """
    global bot_running
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    apihelper.CONNECT_TIMEOUT = 10
    apihelper.READ_TIMEOUT = 20
    
    restart_count = 0
    max_restarts = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –ø–æ–¥—Ä—è–¥
    
    while bot_running and restart_count < max_restarts:
        bot = None
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_count + 1})...")
            bot = telebot.TeleBot(token=TOKEN, threaded=True)
            
            def split_audio_file(input_file, chunk_duration=30):
                """
                –†–∞–∑–±–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–ª–µ–≥—á–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.
                """
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    result = subprocess.run([
                        'ffprobe',
                        '-v', 'error',
                        '-show_entries', 'format=duration',
                        '-of', 'default=noprint_wrappers=1:nokey=1',
                        input_file
                    ], capture_output=True, text=True, timeout=30)
                    
                    if result.returncode != 0:
                        raise subprocess.CalledProcessError(result.returncode, 'ffprobe')
                        
                    audio_duration = float(result.stdout.strip())
                    
                    chunk_paths = []
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Ñ–∞–π–ª –Ω–∞ –∫—É—Å–∫–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    for start in np.arange(0, audio_duration, chunk_duration):
                        end = min(start + chunk_duration, audio_duration)
                        chunk_filename = os.path.join(
                            TEMP_AUDIO_DIR,
                            f'audio_chunk_{int(start)}_{int(time.time())}.wav'
                        )

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ffmpeg –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Å–∫–∞ –∞—É–¥–∏–æ
                        result = subprocess.run([
                            'ffmpeg',
                            '-i', input_file,
                            '-ss', str(start),
                            '-to', str(end),
                            '-acodec', 'pcm_s16le',
                            '-ar', '44100',
                            '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                            chunk_filename
                        ], capture_output=True, timeout=60)
                        
                        if result.returncode == 0:
                            chunk_paths.append(chunk_filename)
                        else:
                            logger.error(f"–û—à–∏–±–∫–∞ ffmpeg: {result.stderr.decode()}")

                    return chunk_paths
                    
                except subprocess.TimeoutExpired:
                    logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞")
                    return []
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞: {e}")
                    return []

            @bot.message_handler(commands=['start', 'help'])
            def send_welcome(message):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ start –∏ help"""
                if message.from_user.id != ALLOWED_USER_ID:
                    safe_bot_operation(bot, bot.reply_to, message, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò–∑–≤–∏–Ω–∏—Ç–µ.')
                    return
                
                welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏!

üó£Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç.
üìù –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫.
‚ö° –î–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∏–≤–∞—é—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–∏.
                """
                safe_bot_operation(bot, bot.reply_to, message, welcome_text.strip())

            @bot.message_handler(func=lambda message: True, content_types=['text'])
            def text_processing(message):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
                if message.from_user.id != ALLOWED_USER_ID:
                    safe_bot_operation(bot, bot.reply_to, message, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò–∑–≤–∏–Ω–∏—Ç–µ.')
                    return

                safe_bot_operation(bot, bot.reply_to, message, 'üó£Ô∏è –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ –º–Ω–µ.')

            @bot.message_handler(content_types=['voice'])
            def voice_processing(message):
                """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
                if message.from_user.id != ALLOWED_USER_ID:
                    safe_bot_operation(bot, bot.reply_to, message, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò–∑–≤–∏–Ω–∏—Ç–µ.')
                    return

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å polling
                threading.Thread(target=process_voice_message, args=(bot, message), daemon=True).start()

            def process_voice_message(bot, message):
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
                ogg_filepath = None
                wav_filepath = None
                
                try:
                    safe_bot_operation(bot, bot.reply_to, message, '‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')

                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    file_id = message.voice.file_id
                    file_info = safe_bot_operation(bot, bot.get_file, file_id)
                    
                    if not file_info:
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ")
                        
                    downloaded_file = safe_bot_operation(bot, bot.download_file, file_info.file_path)
                    
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
                    timestamp = int(time.time())
                    ogg_filepath = os.path.join(TEMP_AUDIO_DIR, f'audio_{timestamp}.ogg')
                    wav_filepath = os.path.join(TEMP_AUDIO_DIR, f'audio_{timestamp}.wav')

                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    with open(ogg_filepath, 'wb') as new_file:
                        new_file.write(downloaded_file)

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ OGG –≤ WAV —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    result = subprocess.run([
                        'ffmpeg',
                        '-i', ogg_filepath,
                        '-acodec', 'pcm_s16le',
                        '-ar', '44100',
                        '-y',
                        wav_filepath
                    ], capture_output=True, timeout=120)
                    
                    if result.returncode != 0:
                        raise subprocess.CalledProcessError(result.returncode, 'ffmpeg')

                    # –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                    chunk_paths = split_audio_file(wav_filepath)
                    if chunk_paths:
                        process_recognition(bot, message, chunk_paths)
                    else:
                        safe_bot_operation(bot, bot.reply_to, message, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª.')

                except subprocess.TimeoutExpired:
                    safe_bot_operation(bot, bot.reply_to, message, '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.')
                    logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
                except Exception as e:
                    safe_bot_operation(bot, bot.reply_to, message, f'‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ: {str(e)}')
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                finally:
                    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                    for filepath in [ogg_filepath, wav_filepath]:
                        if filepath and os.path.exists(filepath):
                            try:
                                os.remove(filepath)
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filepath}: {e}")

            def process_recognition(bot, message, chunk_paths):
                """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫—É—Å–∫–∞ –∞—É–¥–∏–æ."""
                recognizer = sr.Recognizer()
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
                recognizer.energy_threshold = 300
                recognizer.dynamic_energy_threshold = True

                try:
                    safe_bot_operation(bot, bot.send_message, message.chat.id, 'üìù –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...')

                    recognized_parts = []
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫—É—Å–∫–∞ –∞—É–¥–∏–æ
                    for i, chunk_path in enumerate(chunk_paths, 1):
                        try:
                            with sr.AudioFile(chunk_path) as source:
                                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —à—É–º–∞
                                recognizer.adjust_for_ambient_noise(source, duration=0.5)
                                audio_data = recognizer.record(source)
                                
                                # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é Google Speech Recognition
                                chunk_text = recognizer.recognize_google(
                                    audio_data, language='ru-RU')
                                
                                if chunk_text.strip():
                                    recognized_parts.append(chunk_text)
                                    safe_bot_operation(bot, bot.send_message, message.chat.id, f"–ß–∞—Å—Ç—å {i}: {chunk_text}")
                                    
                        except sr.UnknownValueError:
                            safe_bot_operation(bot, bot.send_message, message.chat.id, f'‚ö†Ô∏è –ß–∞—Å—Ç—å {i}: —Ä–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.')
                        except sr.RequestError as e:
                            safe_bot_operation(bot, bot.send_message, message.chat.id, f'‚ö†Ô∏è –ß–∞—Å—Ç—å {i}: –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.')
                            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–ª—è —á–∞—Å—Ç–∏ {i}: {e}")
                        except Exception as e:
                            safe_bot_operation(bot, bot.send_message, message.chat.id, f'‚ö†Ô∏è –ß–∞—Å—Ç—å {i}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.')
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —á–∞—Å—Ç–∏ {i}: {e}")
                        finally:
                            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                            if os.path.exists(chunk_path):
                                try:
                                    os.remove(chunk_path)
                                except Exception as e:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞–Ω–∫ {chunk_path}: {e}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if recognized_parts:
                        full_text = " ".join(recognized_parts)
                        safe_bot_operation(bot, bot.send_message, message.chat.id, f'üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{full_text}')
                    else:
                        safe_bot_operation(bot, bot.send_message, message.chat.id, 'üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏.')
                        
                    safe_bot_operation(bot, bot.send_message, message.chat.id, '‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

                except Exception as e:
                    safe_bot_operation(bot, bot.send_message, message.chat.id, f'‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {str(e)}')
                    logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")

            # –ó–∞–ø—É—Å–∫ polling —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            bot.infinity_polling(
                timeout=20,           # –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
                long_polling_timeout=15,  # –¢–∞–π–º–∞—É—Ç –¥–ª—è long polling
                logger_level=logging.WARNING,  # –ú–µ–Ω—å—à–µ –ª–æ–≥–æ–≤ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
                restart_on_change=False,
                allowed_updates=['message']  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            )
            
        except (ReadTimeout, ConnectionError) as e:
            restart_count += 1
            wait_time = min(30 * restart_count, 300)  # –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
            logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
            if bot_running:
                time.sleep(wait_time)
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            bot_running = False
            break
        except Exception as e:
            restart_count += 1
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            if bot_running and restart_count < max_restarts:
                wait_time = min(10 * restart_count, 60)
                logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time} —Å–µ–∫—É–Ω–¥...")
                time.sleep(wait_time)
        finally:
            if bot and hasattr(bot, 'stop_polling'):
                try:
                    bot.stop_polling()
                except:
                    pass
            
            # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç–µ –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç
            if restart_count > 0:
                time.sleep(1)
    
    if restart_count >= max_restarts:
        logger.error(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({max_restarts}). –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
    
    cleanup_temp_files()
    logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == '__main__':
    try:
        run_bot()
    except KeyboardInterrupt:
        logger.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        cleanup_temp_files()
