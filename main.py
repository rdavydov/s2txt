import telebot
import speech_recognition as sr
import os
import numpy as np
import subprocess
import time
import logging
import threading
from requests.exceptions import ReadTimeout, ConnectionError, HTTPError
from telebot import apihelper
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
TOKEN = os.getenv('TOKEN')
ALLOWED_USER_ID = os.getenv('ALLOWED_USER_ID')

if not TOKEN or not ALLOWED_USER_ID:
    try:
        from config import TOKEN, ALLOWED_USER_ID
    except ImportError:
        logger.error("–¢–æ–∫–µ–Ω –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        sys.exit(1)

try:
    ALLOWED_USER_ID = int(ALLOWED_USER_ID)
except ValueError:
    logger.error("ALLOWED_USER_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
apihelper.CONNECT_TIMEOUT = 10
apihelper.READ_TIMEOUT = 15

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_AUDIO_DIR = 'temp_audio'
os.makedirs(TEMP_AUDIO_DIR, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–±–æ—Ç—ã
bot_running = True
current_bot = None

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    global bot_running, current_bot
    logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    bot_running = False
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
    if current_bot:
        try:
            current_bot.stop_polling()
            logger.info("Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling: {e}")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

def cleanup_temp_files():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        for filename in os.listdir(TEMP_AUDIO_DIR):
            filepath = os.path.join(TEMP_AUDIO_DIR, filename)
            if os.path.isfile(filepath):
                os.remove(filepath)
        logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

def safe_api_call(func, *args, max_retries=3, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ API –≤—ã–∑–æ–≤–æ–≤ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    if not bot_running:
        return None
        
    for attempt in range(max_retries):
        try:
            return func(*args, **kwargs)
        except (ReadTimeout, ConnectionError, HTTPError) as e:
            if attempt < max_retries - 1:
                wait_time = 2 ** attempt
                logger.warning(f"–û—à–∏–±–∫–∞ API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {wait_time}—Å...")
                time.sleep(wait_time)
            else:
                logger.error(f"API –≤—ã–∑–æ–≤ –Ω–µ—É–¥–∞—á–µ–Ω –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}")
                raise
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API: {e}")
            raise

def split_audio_file(input_file, chunk_duration=30):
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞ —á–∞—Å—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not bot_running:
        return []
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        result = subprocess.run([
            'ffprobe',
            '-v', 'error',
            '-show_entries', 'format=duration',
            '-of', 'default=noprint_wrappers=1:nokey=1',
            input_file
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ ffprobe: {result.stderr}")
            return []
            
        audio_duration = float(result.stdout.strip())
        logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {audio_duration:.2f} —Å–µ–∫—É–Ω–¥")

        chunk_paths = []
        for start in np.arange(0, audio_duration, chunk_duration):
            if not bot_running:
                break
                
            end = min(start + chunk_duration, audio_duration)
            chunk_filename = os.path.join(
                TEMP_AUDIO_DIR,
                f'audio_chunk_{int(start)}_{int(time.time())}.wav'
            )

            # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            result = subprocess.run([
                'ffmpeg',
                '-i', input_file,
                '-ss', str(start),
                '-to', str(end),
                '-acodec', 'pcm_s16le',
                '-ar', '44100',
                '-y',  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                chunk_filename
            ], capture_output=True, timeout=60)
            
            if result.returncode == 0:
                chunk_paths.append(chunk_filename)
                logger.debug(f"–°–æ–∑–¥–∞–Ω —á–∞–Ω–∫: {chunk_filename}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞: {result.stderr.decode()}")

        return chunk_paths
        
    except subprocess.TimeoutExpired:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞")
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        return []

def run_bot():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    global bot_running, current_bot
    
    restart_count = 0
    max_restarts = 5
    
    while bot_running and restart_count < max_restarts:
        current_bot = None
        try:
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {restart_count + 1})...")
            current_bot = telebot.TeleBot(token=TOKEN, threaded=True)
            
            @current_bot.message_handler(commands=['start', 'help'])
            def send_welcome(message):
                """–ö–æ–º–∞–Ω–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
                if not bot_running:
                    return
                    
                if message.from_user.id != ALLOWED_USER_ID:
                    safe_api_call(current_bot.reply_to, message, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò–∑–≤–∏–Ω–∏—Ç–µ.')
                    return
                
                welcome_text = "üëã –ë–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\nüó£Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                safe_api_call(current_bot.reply_to, message, welcome_text)

            @current_bot.message_handler(func=lambda message: True, content_types=['text'])
            def text_processing(message):
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
                if not bot_running:
                    return
                    
                if message.from_user.id != ALLOWED_USER_ID:
                    safe_api_call(current_bot.reply_to, message, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò–∑–≤–∏–Ω–∏—Ç–µ.')
                    return

                safe_api_call(current_bot.reply_to, message, 'üó£Ô∏è –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ª–∏–±–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ –º–Ω–µ.')

            @current_bot.message_handler(content_types=['voice'])
            def voice_processing(message):
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
                if not bot_running:
                    return
                    
                if message.from_user.id != ALLOWED_USER_ID:
                    safe_api_call(current_bot.reply_to, message, 'üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò–∑–≤–∏–Ω–∏—Ç–µ.')
                    return

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å polling
                threading.Thread(target=process_voice_in_thread, args=(current_bot, message), daemon=True).start()

            def process_voice_in_thread(bot, message):
                """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
                if not bot_running:
                    return
                    
                ogg_filepath = None
                wav_filepath = None
                
                try:
                    safe_api_call(bot.reply_to, message, '‚åõ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ, —è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...')

                    if not bot_running:
                        return
                        
                    file_id = message.voice.file_id
                    file_info = safe_api_call(bot.get_file, file_id)
                    
                    if not bot_running or not file_info:
                        return
                        
                    downloaded_file = safe_api_call(bot.download_file, file_info.file_path)
                    
                    if not bot_running or not downloaded_file:
                        return
                    
                    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
                    timestamp = int(time.time())
                    ogg_filepath = os.path.join(TEMP_AUDIO_DIR, f'audio_{timestamp}.ogg')
                    wav_filepath = os.path.join(TEMP_AUDIO_DIR, f'audio_{timestamp}.wav')

                    with open(ogg_filepath, 'wb') as new_file:
                        new_file.write(downloaded_file)

                    if not bot_running:
                        return

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                    result = subprocess.run([
                        'ffmpeg',
                        '-i', ogg_filepath,
                        '-acodec', 'pcm_s16le',
                        '-ar', '44100',
                        '-y',
                        wav_filepath
                    ], capture_output=True, timeout=120)
                    
                    if result.returncode != 0:
                        raise Exception(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {result.stderr.decode()}")

                    if not bot_running:
                        return

                    chunk_paths = split_audio_file(wav_filepath)
                    if chunk_paths and bot_running:
                        process_recognition(bot, message, chunk_paths)
                    elif bot_running:
                        safe_api_call(bot.reply_to, message, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª.')

                except subprocess.TimeoutExpired:
                    if bot_running:
                        safe_api_call(bot.reply_to, message, '‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞.')
                    logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
                except Exception as e:
                    if bot_running:
                        safe_api_call(bot.reply_to, message, f'‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ: {str(e)}')
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                finally:
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                    for filepath in [ogg_filepath, wav_filepath]:
                        if filepath and os.path.exists(filepath):
                            try:
                                os.remove(filepath)
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {filepath}: {e}")

            def process_recognition(bot, message, chunk_paths):
                """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
                if not bot_running:
                    return
                    
                recognizer = sr.Recognizer()
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                recognizer.energy_threshold = 300
                recognizer.dynamic_energy_threshold = True

                try:
                    safe_api_call(bot.send_message, message.chat.id, 'üìù –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...')

                    recognized_texts = []
                    for i, chunk_path in enumerate(chunk_paths, 1):
                        if not bot_running:
                            break
                            
                        try:
                            with sr.AudioFile(chunk_path) as source:
                                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —à—É–º–∞
                                recognizer.adjust_for_ambient_noise(source, duration=0.5)
                                audio_data = recognizer.record(source)
                                
                                chunk_text = recognizer.recognize_google(audio_data, language='ru-RU')
                                if chunk_text.strip():
                                    recognized_texts.append(chunk_text)
                                    if bot_running:
                                        safe_api_call(bot.send_message, message.chat.id, f"–ß–∞—Å—Ç—å {i}: {chunk_text}")
                                    
                        except sr.UnknownValueError:
                            if bot_running:
                                safe_api_call(bot.send_message, message.chat.id, f'‚ö†Ô∏è –ß–∞—Å—Ç—å {i}: –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.')
                        except sr.RequestError as e:
                            if bot_running:
                                safe_api_call(bot.send_message, message.chat.id, f'‚ö†Ô∏è –ß–∞—Å—Ç—å {i}: –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞.')
                            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                        except Exception as e:
                            if bot_running:
                                safe_api_call(bot.send_message, message.chat.id, f'‚ö†Ô∏è –ß–∞—Å—Ç—å {i}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.')
                            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏ {i}: {e}")
                        finally:
                            # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —á–∞–Ω–∫
                            try:
                                if os.path.exists(chunk_path):
                                    os.remove(chunk_path)
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–∞–Ω–∫ {chunk_path}: {e}")

                    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    if bot_running:
                        if recognized_texts:
                            full_text = " ".join(recognized_texts)
                            safe_api_call(bot.send_message, message.chat.id, f'üìÑ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{full_text}')
                        else:
                            safe_api_call(bot.send_message, message.chat.id, 'üòî –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.')
                        
                        safe_api_call(bot.send_message, message.chat.id, '‚úÖ –ì–æ—Ç–æ–≤–æ!')

                except Exception as e:
                    if bot_running:
                        safe_api_call(bot.send_message, message.chat.id, f'‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}')
                    logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")

            # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å polling –≤ —Ü–∏–∫–ª–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            restart_count = 0  # –°–±—Ä–æ—Å –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π polling –≤ —Ü–∏–∫–ª–µ –≤–º–µ—Å—Ç–æ infinity_polling
            while bot_running:
                try:
                    current_bot.polling(
                        timeout=10,
                        long_polling_timeout=5,
                        logger_level=logging.WARNING,
                        none_stop=False,
                        allowed_updates=['message']
                    )
                except Exception as e:
                    if bot_running:
                        logger.warning(f"–û—à–∏–±–∫–∞ –≤ polling: {e}")
                        time.sleep(2)
                    else:
                        break
            
        except (ReadTimeout, ConnectionError) as e:
            if bot_running:
                restart_count += 1
                wait_time = min(15 * restart_count, 120)  # –ú–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã
                logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time}—Å...")
                time.sleep(wait_time)
            else:
                break
                
        except KeyboardInterrupt:
            logger.info("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            bot_running = False
            break
            
        except Exception as e:
            if bot_running:
                restart_count += 1
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                if restart_count < max_restarts:
                    wait_time = min(10 * restart_count, 60)
                    logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {wait_time}—Å...")
                    time.sleep(wait_time)
                else:
                    break
            else:
                break
                
        finally:
            if current_bot:
                try:
                    current_bot.stop_polling()
                    logger.info("Polling –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    pass

    if restart_count >= max_restarts:
        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ({max_restarts})")
    
    cleanup_temp_files()
    logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")

if __name__ == '__main__':
    try:
        run_bot()
    except KeyboardInterrupt:
        logger.info("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    finally:
        cleanup_temp_files()
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
